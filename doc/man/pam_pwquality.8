.\" Automatically generated by Pod::Man 4.14 (Pod::Simple 3.43)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.nr rF 0
.if \n(.g .if rF .nr rF 1
.if (\n(rF:(\n(.g==0)) \{\
.    if \nF \{\
.        de IX
.        tm Index:\\$1\t\\n%\t"\\$2"
..
.        if !\nF==2 \{\
.            nr % 0
.            nr F 2
.        \}
.    \}
.\}
.rr rF
.\" ========================================================================
.\"
.IX Title "PAM_PWQUALITY 8"
.TH PAM_PWQUALITY 8 "2022-11-18" "Red Hat, Inc." "Linux-PAM Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pam_pwquality \- PAM module to perform password quality checking
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBpam_pwquality.so\fR [\fI...\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This module can be plugged into the \fBpassword\fR stack of a given service
to provide some plug-in strength-checking for passwords.
The code was originally based on pam_cracklib module and the module is
backwards compatible with its options.
.PP
The action of this module is to prompt the user for a password and check
its strength against a system dictionary and a set of rules for identifying
poor choices.
.PP
The first action is to prompt for a single password, check its strength
and then, if it is considered strong, prompt for the password a second time
(to verify that it was typed correctly on the first occasion). All being
well, the password is passed on to subsequent modules to be installed as the
new authentication token.
.PP
The checks for strength are:
.IP "Palindrome" 4
.IX Item "Palindrome"
Is the new password a palindrome?
.IP "Case Change Only" 4
.IX Item "Case Change Only"
Is the new password the same as the old one with only a change of case?
.IP "Similar" 4
.IX Item "Similar"
Is the new password too much like the old one? This is primarily controlled
by one argument, \fBdifok\fR which is a number of character changes (inserts,
removals, or replacements) between the old and new password that are enough
to accept the new password.
.IP "Simple" 4
.IX Item "Simple"
Is the new password too small? This is controlled by 6 arguments
\&\fBminlen\fR, \fBmaxclassrepeat\fR, \fBdcredit\fR, \fBucredit\fR, \fBlcredit\fR,
and \fBocredit\fR. See the section on the arguments for the details of how
these work and there defaults.
.IP "Rotated" 4
.IX Item "Rotated"
Is the new password a rotated version of the old password?
.IP "Same consecutive characters" 4
.IX Item "Same consecutive characters"
Optional check for same consecutive characters.
.IP "Too long monotonic character sequence" 4
.IX Item "Too long monotonic character sequence"
Optional check for too long monotonic character sequence.
.IP "Contains user name" 4
.IX Item "Contains user name"
Check whether the password contains the user's name in some form.
.IP "Dictionary check" 4
.IX Item "Dictionary check"
The \fICracklib\fR routine is called to check if the password is part of
a dictionary.
.PP
These checks are configurable either by use of the module arguments
or by modifying the \fI/etc/security/pwquality.conf\fR configuration file. The
module arguments override the settings in the configuration file.
.SH "OPTIONS"
.IX Header "OPTIONS"
.IP "\fBdebug\fR" 4
.IX Item "debug"
This option makes the module write information to \fBsyslog\fR\|(3)
indicating the behavior of the module (this option does not write password
information to the log file).
.IP "\fBauthtok_type=\fR\fI\s-1XXX\s0\fR" 4
.IX Item "authtok_type=XXX"
The default action is for the module to use the following prompts when
requesting passwords: \f(CW"New UNIX password: "\fR and
\&\f(CW"Retype UNIX password: "\fR. The example word
\&\fI\s-1UNIX\s0\fR can be replaced with this option, by default it is empty.
.IP "\fBretry=\fR\fIN\fR" 4
.IX Item "retry=N"
Prompt user at most \fIN\fR times before returning with error. The default is
\&\fI1\fR.
.IP "\fBdifok=\fR\fIN\fR" 4
.IX Item "difok=N"
This argument will change the default of \fI1\fR for the number of changes in
the new password from the old password.
.Sp
The special value of \fI0\fR disables all checks of similarity of the new password
with the old password except the new password being exactly the same as
the old one.
.IP "\fBminlen=\fR\fIN\fR" 4
.IX Item "minlen=N"
The minimum acceptable size for the new password (plus one if credits are not
disabled which is the default). In addition to the number of characters in
the new password, credit (of +1 in length) is given for each different kind
of character (\fIother\fR, \fIupper\fR, \fIlower\fR and \fIdigit\fR). The default for this
parameter is \fI8\fR. Note that there is a pair of length limits also in
\&\fICracklib\fR, which is used for dictionary checking, a \*(L"way too short\*(R" limit
of \fI4\fR which is hard coded in and a build time defined limit (\fI6\fR) that will
be checked without reference to \fBminlen\fR.
.IP "\fBdcredit=\fR\fIN\fR" 4
.IX Item "dcredit=N"
(N >= 0) This is the maximum credit for having digits in the new password.
If you have less than or \fIN\fR digits, each digit will count +1 towards meeting
the current \fBminlen\fR value. The default for \fBdcredit\fR is \fI0\fR
which means there is no bonus for digits in password.
.Sp
(N < 0) This is the minimum number of digits that must be met for a new
password.
.IP "\fBucredit=\fR\fIN\fR" 4
.IX Item "ucredit=N"
(N >= 0) This is the maximum credit for having upper case letters in the new password.
If you have less than or \fIN\fR upper case letters, each upper case letter will count +1 towards meeting
the current \fBminlen\fR value. The default for \fBucredit\fR is \fI0\fR
which means there is no bonus for upper case letters in password.
.Sp
(N < 0) This is the minimum number of upper case letters that must be met for a new
password.
.IP "\fBlcredit=\fR\fIN\fR" 4
.IX Item "lcredit=N"
(N >= 0) This is the maximum credit for having lower case letters in the new password.
If you have less than or \fIN\fR lower case letters, each lower case letter will count +1 towards meeting
the current \fBminlen\fR value. The default for \fBlcredit\fR is \fI0\fR
which means there is no bonus for lower case letters in password.
.Sp
(N < 0) This is the minimum number of lower case letters that must be met for a new
password.
.IP "\fBocredit=\fR\fIN\fR" 4
.IX Item "ocredit=N"
(N >= 0) This is the maximum credit for having other characters in the new password.
If you have less than or \fIN\fR other characters, each other character will count +1 towards meeting
the current \fBminlen\fR value. The default for \fBocredit\fR is \fI0\fR
which means there is no bonus for other characters in password.
.Sp
(N < 0) This is the minimum number of other characters that must be met for a new
password.
.IP "\fBminclass=\fR\fIN\fR" 4
.IX Item "minclass=N"
The minimum number of required classes of characters for the new password.
The four classes are digits, upper and lower letters and other characters.
The difference to the \fBcredit\fR check is that a specific class if of
characters is not required. Instead \fIN\fR out of four of the classes are
required. By default the check is disabled.
.IP "\fBmaxrepeat=\fR\fIN\fR" 4
.IX Item "maxrepeat=N"
Reject passwords which contain more than \fIN\fR same consecutive characters.
The default is 0 which means that this check is disabled.
.IP "\fBmaxsequence=\fR\fIN\fR" 4
.IX Item "maxsequence=N"
Reject passwords which contain monotonic character sequences longer than \fIN\fR.
The default is 0 which means that this check is disabled.
Examples of such sequence are '12345' or 'fedcb'. Note that
most such passwords will not pass the simplicity check unless the sequence
is only a minor part of the password.
.IP "\fBmaxclassrepeat=\fR\fIN\fR" 4
.IX Item "maxclassrepeat=N"
Reject passwords which contain more than \fIN\fR consecutive characters of the
same class. The default is 0 which means that this check is disabled.
.IP "\fBgecoscheck=\fR\fIN\fR" 4
.IX Item "gecoscheck=N"
If nonzero, check whether the individual words longer than 3 characters
from the \fBpasswd\fR\|(5) \s-1GECOS\s0 field of the user are contained in the new
password. The default is 0 which means that this check is disabled.
.IP "\fBdictcheck=\fR\fIN\fR" 4
.IX Item "dictcheck=N"
If nonzero, check whether the password (with possible modifications)
matches a word in a dictionary. Currently the dictionary check is performed
using the \fIcracklib\fR library. The default is 1 which means that this check
is enabled.
.IP "\fBusercheck=\fR\fIN\fR" 4
.IX Item "usercheck=N"
If nonzero, check whether the password (with possible modifications)
contains the user name in some form. The default is 1 which means that
this check is enabled. It is not performed for user names shorter
than 3 characters.
.IP "\fBusersubstr=\fR\fIN\fR" 4
.IX Item "usersubstr=N"
If greater than 3 (due to the minimum length in usercheck), check whether the
password contains a substring of the user name of at least \fIN\fR length in some form.
The default is 0, which means this check is disabled.
.IP "\fBenforcing=\fR\fIN\fR" 4
.IX Item "enforcing=N"
If nonzero, reject the password if it fails the checks, otherwise
only print the warning. The default is 1 which means that the weak password
is rejected (for non-root users).
.IP "\fBbadwords=\fR\fI<list of words>\fR" 4
.IX Item "badwords=<list of words>"
The words more than 3 characters long from this space separated list are
individually searched for and forbidden in the new password.
By default the list is empty which means that this check is disabled.
.IP "\fBdictpath=\fR\fI/path/to/dict\fR" 4
.IX Item "dictpath=/path/to/dict"
This options allows for specification of non-default path to the cracklib
dictionaries.
.IP "\fBenforce_for_root\fR" 4
.IX Item "enforce_for_root"
The module will return error on failed check even if the user changing the
password is root. This option is off by default which means that just
the message about the failed check is printed but root can change
the password anyway. Note that root is not asked for an old password
so the checks that compare the old and new password are not performed.
.IP "\fBlocal_users_only\fR" 4
.IX Item "local_users_only"
The module will not test the password quality for users that are not present
in the \fI/etc/passwd\fR file. The module still asks for the password so
the following modules in the stack can use the \fBuse_authtok\fR option.
This option is off by default.
.IP "\fBuse_authtok\fR" 4
.IX Item "use_authtok"
This argument is used to \fIforce\fR the module to not prompt the user for
a new password but use the one provided by the previously stacked
\&\fBpassword\fR module.
.SH "MODULE TYPES PROVIDED"
.IX Header "MODULE TYPES PROVIDED"
Only the \fBpassword\fR module type is provided.
.SH "RETURN VALUES"
.IX Header "RETURN VALUES"
.IP "\s-1PAM_SUCCESS\s0" 4
.IX Item "PAM_SUCCESS"
The new password passes all checks.
.IP "\s-1PAM_AUTHTOK_ERR\s0" 4
.IX Item "PAM_AUTHTOK_ERR"
No new password was entered, the username could not be determined or the
new password fails the strength checks.
.IP "\s-1PAM_AUTHTOK_RECOVERY_ERR\s0" 4
.IX Item "PAM_AUTHTOK_RECOVERY_ERR"
The old password was not supplied by a previous stacked module or got not
requested from the user. The first error can happen if \fBuse_authtok\fR
is specified.
.IP "\s-1PAM_SERVICE_ERR\s0" 4
.IX Item "PAM_SERVICE_ERR"
A internal error occurred.
.SH "EXAMPLES"
.IX Header "EXAMPLES"
For an example of the use of this module, we show how it may be stacked
with the password component of \fBpam_unix\fR\|(8).
.PP
.Vb 9
\& #
\& # These lines stack two password type modules. In this example the
\& # user is given 3 opportunities to enter a strong password. The
\& # "use_authtok" argument ensures that the pam_unix module does not
\& # prompt for a password, but instead uses the one provided by
\& # pam_pwquality.
\& #
\& password required pam_pwquality.so retry=3
\& password required pam_unix.so use_authtok
.Ve
.PP
Another example is for the case that you want to use sha256 password
encryption:
.PP
.Vb 9
\& #
\& # These lines allow modern systems to support passwords of at least 14
\& # bytes with extra credit of 2 for digits and 2 for others the new
\& # password must have at least three bytes that are not present in the
\& # old password
\& #
\& password required pam_pwquality.so \e
\&               difok=3 minlen=15 dcredit=2 ocredit=2
\& password required pam_unix.so use_authtok nullok sha256
.Ve
.PP
And here is another example in case you don't want to use credits:
.PP
.Vb 8
\& #
\& # These lines require the user to select a password with a minimum
\& # length of 8 and with at least 1 digit number, 1 upper case letter,
\& # and 1 other character
\& #
\& password required pam_pwquality.so \e
\&               dcredit=\-1 ucredit=\-1 ocredit=\-1 lcredit=0 minlen=8
\& password required pam_unix.so use_authtok nullok sha256
.Ve
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fBpwscore\fR\|(1), \fBpwquality.conf\fR\|(5), \fBpam_pwquality\fR\|(8),
\&\fBpam.conf\fR\|(5), \s-1\fBPAM\s0\fR\|(8)
.SH "AUTHORS"
.IX Header "AUTHORS"
Tomas Mraz <tmraz@redhat.com>
.PP
Original author of \fBpam_cracklib\fR module Cristian Gafton <gafton@redhat.com>
