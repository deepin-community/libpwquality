.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PWMAKE 1"
.TH PWMAKE 1 "2017-02-10" "Red Hat, Inc." "General Commands Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pwmake \- simple tool for generating random relatively easily pronounceable
passwords
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBpwmake\fR \fI<entropy\-bits>\fR
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBpwmake\fR is a simple configurable tool for generating random and relatively
easily pronounceable passwords. The tool allows you to specify the number of
entropy bits that are used to generate the password.
.PP
The entropy is pulled from \fI/dev/urandom\fR.
.PP
The minimum number of bits is \fI56\fR which is usable for passwords on
systems/services where brute force attacks are of very limited rate of tries.
The \fI64\fR bits should be adequate for applications where the attacker
does not have direct access to the password hash file. For situations where
the attacker might obtain the direct access to the password hash or the
password is used as an encryption key \fI80\fR to \fI128\fR bits should be
used depending on your level of paranoia.
.SH "OPTIONS"
.IX Header "OPTIONS"
The first and only argument is the number of bits of entropy used to generate
the password.
.SH "FILES"
.IX Header "FILES"
\&\fI/etc/security/pwquality.conf\fR \- The configuration file for the libpwquality
library.
.SH "RETURN CODES"
.IX Header "RETURN CODES"
\&\fBpwmake\fR returns 0 on success, non zero on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpwscore\fR\|(1), \fIpam_pwquality\fR\|(8)
.SH "AUTHORS"
.IX Header "AUTHORS"
Tomas Mraz <tmraz@redhat.com>
