.\" Automatically generated by Pod::Man 4.09 (Pod::Simple 3.35)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "PWSCORE 1"
.TH PWSCORE 1 "2017-02-10" "Red Hat, Inc." "General Commands Manual"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
pwscore \- simple configurable tool for checking quality of a password
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
\&\fBpwscore\fR [\fIuser\fR]
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
\&\fBpwscore\fR is a simple tool for checking quality of a password. The password
is read from stdin.
.PP
The tool uses the \fBlibpwquality\fR library to perform configurable checks
for minimum length, dictionary checking against cracklib dictionaries,
and other checks.
.PP
It either reports an error if the password fails any of the checks, or it
prints out the password quality score as an integer value between \fI0\fR and
\&\fI100\fR.
.PP
The password quality score is relative to the \fBminlen\fR setting in the
configuration file. But in general values below 50 can be treated as moderate
quality and above it fairly strong quality. Any password that passes the quality
checks (especially the mandatory cracklib check) should withstand dictionary
attacks and scores above 50 with the default minlen setting even fast brute
force attacks.
.SH "OPTIONS"
.IX Header "OPTIONS"
The first and only optional argument is the user name that is used to check
the similarity of the password to the username.
.SH "FILES"
.IX Header "FILES"
\&\fI/etc/security/pwquality.conf\fR \- The configuration file for the libpwquality
library.
.SH "RETURN CODES"
.IX Header "RETURN CODES"
\&\fBpwscore\fR returns 0 on success, non zero on error.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
\&\fIpwscore\fR\|(1), \fIpwquality.conf\fR\|(5), \fIpam_pwquality\fR\|(8)
.SH "AUTHORS"
.IX Header "AUTHORS"
Tomas Mraz <tmraz@redhat.com>
